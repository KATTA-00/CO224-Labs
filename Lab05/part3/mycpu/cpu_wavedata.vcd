$date
	Fri May 19 09:27:06 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 & WRITEENABLE $end
$var wire 8 ' REGOUT2 [7:0] $end
$var wire 8 ( REGOUT1 [7:0] $end
$var wire 32 ) PC [31:0] $end
$var wire 8 * MUX1 [7:0] $end
$var wire 1 + IMMEDIATESELECT $end
$var wire 1 , COMPSELECT $end
$var wire 8 - COMPOUT [7:0] $end
$var wire 8 . ALURESULT [7:0] $end
$var wire 3 / ALUOP [2:0] $end
$var wire 8 0 ALUIN [7:0] $end
$scope module Alu $end
$var wire 8 1 or_result [7:0] $end
$var wire 8 2 forward_result [7:0] $end
$var wire 8 3 and_result [7:0] $end
$var wire 8 4 add_result [7:0] $end
$var wire 3 5 SELECT [0:2] $end
$var wire 8 6 RESULT [7:0] $end
$var wire 8 7 DATA2 [7:0] $end
$var wire 8 8 DATA1 [7:0] $end
$scope module alu_add $end
$var wire 8 9 RESULT [7:0] $end
$var wire 8 : DATA2 [7:0] $end
$var wire 8 ; DATA1 [7:0] $end
$upscope $end
$scope module alu_and $end
$var wire 8 < RESULT [7:0] $end
$var wire 8 = DATA2 [7:0] $end
$var wire 8 > DATA1 [7:0] $end
$upscope $end
$scope module alu_forward $end
$var wire 8 ? RESULT [7:0] $end
$var wire 8 @ DATA2 [7:0] $end
$upscope $end
$scope module alu_or $end
$var wire 8 A RESULT [7:0] $end
$var wire 8 B DATA2 [7:0] $end
$var wire 8 C DATA1 [7:0] $end
$upscope $end
$scope module mux $end
$var wire 8 D add_result [7:0] $end
$var wire 8 E and_result [7:0] $end
$var wire 8 F forward_result [7:0] $end
$var wire 8 G or_result [7:0] $end
$var wire 3 H SELECT [2:0] $end
$var reg 8 I RESULT [7:0] $end
$upscope $end
$upscope $end
$scope module Control_Unit $end
$var wire 8 J OPCODE [7:0] $end
$var reg 3 K ALUOP [2:0] $end
$var reg 1 , COMP_SELECT $end
$var reg 1 + IMMEDIATE_SELECT $end
$var reg 1 & WRITEENABLE $end
$upscope $end
$scope module Mux1 $end
$var wire 1 , SELECT $end
$var wire 8 L DATA2 [7:0] $end
$var wire 8 M DATA1 [7:0] $end
$var reg 8 N OUTPUT [7:0] $end
$upscope $end
$scope module Mux2 $end
$var wire 8 O DATA1 [7:0] $end
$var wire 8 P DATA2 [7:0] $end
$var wire 1 + SELECT $end
$var reg 8 Q OUTPUT [7:0] $end
$upscope $end
$scope module Pc $end
$var wire 1 " CLK $end
$var wire 1 $ RESET $end
$var wire 32 R adder_out [31:0] $end
$var reg 32 S PC [31:0] $end
$var reg 32 T PC_NEXT [31:0] $end
$scope module pc_adder $end
$var wire 32 U PC [31:0] $end
$var wire 32 V adder_out [31:0] $end
$upscope $end
$upscope $end
$scope module Reg_File $end
$var wire 1 " CLK $end
$var wire 8 W IN [7:0] $end
$var wire 3 X INADDRESS [2:0] $end
$var wire 8 Y OUT1 [7:0] $end
$var wire 3 Z OUT1ADDRESS [2:0] $end
$var wire 8 [ OUT2 [7:0] $end
$var wire 3 \ OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 & WRITE $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ] i [31:0] $end
$upscope $end
$upscope $end
$scope module Two_Comp $end
$var wire 8 ^ DATA [7:0] $end
$var wire 8 _ OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
x+
bx *
bx )
bx (
bx '
x&
bx %
0$
bx #
0"
bx !
$end
#1
b0 !
b0 )
b0 S
b0 U
#2
b100 T
b100 R
b100 V
#4
1"
#5
b100 !
b100 )
b100 S
b100 U
#6
b1000 T
b1000 R
b1000 V
#7
b101 \
b101 P
b0 Z
b0 X
b0 J
b101 #
b101 %
#8
b101 0
b101 7
b101 :
b101 =
b101 @
b101 B
b101 Q
b0 /
b0 5
b0 H
b0 K
1+
0,
1&
0"
#9
b101 .
b101 6
b101 I
b101 W
bx1x1 1
bx1x1 A
bx1x1 G
b0x0x 3
b0x0x <
b0x0x E
b101 2
b101 ?
b101 F
#12
1"
#13
b1000 !
b1000 )
b1000 S
b1000 U
#14
b1100 T
b1100 R
b1100 V
#15
b1001 0
b1001 7
b1001 :
b1001 =
b1001 @
b1001 B
b1001 Q
b1 \
b1001 P
b1 X
b10000000000001001 #
b10000000000001001 %
b101 (
b101 8
b101 ;
b101 >
b101 C
b101 Y
#16
b1001 .
b1001 6
b1001 I
b1001 W
b1001 2
b1001 ?
b1001 F
b1101 1
b1101 A
b1101 G
b1 3
b1 <
b1 E
0"
#17
b1110 4
b1110 9
b1110 D
#20
1"
#21
b1100 !
b1100 )
b1100 S
b1100 U
#22
b10000 T
b10000 R
b10000 V
#23
b1 0
b1 7
b1 :
b1 =
b1 @
b1 B
b1 Q
b1 P
b10 X
b1 J
b1001 *
b1001 N
b1001 O
b1000000100000000000000001 #
b1000000100000000000000001 %
b1001 '
b1001 M
b1001 [
b1001 ^
#24
b1001 0
b1001 7
b1001 :
b1001 =
b1001 @
b1001 B
b1001 Q
b1 .
b1 6
b1 I
b1 W
b101 1
b101 A
b101 G
0+
b1 2
b1 ?
b1 F
b11110111 -
b11110111 L
b11110111 _
0"
#25
b1001 .
b1001 6
b1001 I
b1001 W
b1101 1
b1101 A
b1101 G
b1001 2
b1001 ?
b1001 F
#28
1"
#29
b10000 !
b10000 )
b10000 S
b10000 U
#30
b10100 T
b10100 R
b10100 V
#31
b0 \
b0 P
b10 Z
b11 X
b10 J
b10000000110000001000000000 #
b10000000110000001000000000 %
#32
b1110 .
b1110 6
b1110 I
b1110 W
b1 /
b1 5
b1 H
b1 K
0"
#33
b101 0
b101 7
b101 :
b101 =
b101 @
b101 B
b101 Q
b101 *
b101 N
b101 O
b101 '
b101 M
b101 [
b101 ^
b1001 (
b1001 8
b1001 ;
b1001 >
b1001 C
b1001 Y
#34
b101 2
b101 ?
b101 F
b11111011 -
b11111011 L
b11111011 _
#36
1"
#37
b10100 !
b10100 )
b10100 S
b10100 U
#38
b11000 T
b11000 R
b11000 V
#39
b1 \
b1 P
b11 Z
b100 X
b11 J
b11000001000000001100000001 #
b11000001000000001100000001 %
#40
b11111011 0
b11111011 7
b11111011 :
b11111011 =
b11111011 @
b11111011 B
b11111011 Q
b11111011 *
b11111011 N
b11111011 O
1,
0"
#41
b11111011 1
b11111011 A
b11111011 G
b1001 3
b1001 <
b1001 E
b11111011 2
b11111011 ?
b11111011 F
b1001 '
b1001 M
b1001 [
b1001 ^
b1110 (
b1110 8
b1110 ;
b1110 >
b1110 C
b1110 Y
#42
b11110111 0
b11110111 7
b11110111 :
b11110111 =
b11110111 @
b11110111 B
b11110111 Q
b11110111 *
b11110111 N
b11110111 O
b11110111 -
b11110111 L
b11110111 _
b11111111 1
b11111111 A
b11111111 G
b1010 3
b1010 <
b1010 E
#43
b110 3
b110 <
b110 E
b11110111 2
b11110111 ?
b11110111 F
#44
b101 .
b101 6
b101 I
b101 W
b101 4
b101 9
b101 D
1"
#45
b11000 !
b11000 )
b11000 S
b11000 U
#46
b11100 T
b11100 R
b11100 V
#47
b101 \
b1110101 P
b0 Z
b0 X
b0 J
b1110101 #
b1110101 %
#48
b11110111 .
b11110111 6
b11110111 I
b11110111 W
b1110101 0
b1110101 7
b1110101 :
b1110101 =
b1110101 @
b1110101 B
b1110101 Q
b1001 *
b1001 N
b1001 O
b0 /
b0 5
b0 H
b0 K
1+
0,
0"
#49
b1110101 .
b1110101 6
b1110101 I
b1110101 W
bx *
bx N
bx O
b1111111 1
b1111111 A
b1111111 G
b100 3
b100 <
b100 E
b1110101 2
b1110101 ?
b1110101 F
bx '
bx M
bx [
bx ^
b101 (
b101 8
b101 ;
b101 >
b101 C
b101 Y
#50
bx -
bx L
bx _
b1110101 1
b1110101 A
b1110101 G
b101 3
b101 <
b101 E
#51
b1111010 4
b1111010 9
b1111010 D
#52
1"
#53
b11100 !
b11100 )
b11100 S
b11100 U
#54
b100000 T
b100000 R
b100000 V
#55
b10010010 0
b10010010 7
b10010010 :
b10010010 =
b10010010 @
b10010010 B
b10010010 Q
b10 \
b10010010 P
b1 X
b10000000010010010 #
b10000000010010010 %
b1110101 (
b1110101 8
b1110101 ;
b1110101 >
b1110101 C
b1110101 Y
#56
b10010010 .
b10010010 6
b10010010 I
b10010010 W
b11110111 1
b11110111 A
b11110111 G
b10010010 2
b10010010 ?
b10010010 F
b10000 3
b10000 <
b10000 E
0"
#57
b1001 *
b1001 N
b1001 O
b1001 '
b1001 M
b1001 [
b1001 ^
b111 4
b111 9
b111 D
#58
b11110111 -
b11110111 L
b11110111 _
#60
1"
#61
b100000 !
b100000 )
b100000 S
b100000 U
#62
b100100 T
b100100 R
b100100 V
#63
b0 0
b0 7
b0 :
b0 =
b0 @
b0 B
b0 Q
b0 \
b0 P
b1 Z
b101 X
b100 J
b100000001010000000100000000 #
b100000001010000000100000000 %
#64
b0 .
b0 6
b0 I
b0 W
b1001 0
b1001 7
b1001 :
b1001 =
b1001 @
b1001 B
b1001 Q
b1110101 1
b1110101 A
b1110101 G
b0 3
b0 <
b0 E
b0 2
b0 ?
b0 F
b10 /
b10 5
b10 H
b10 K
0+
0"
#65
b1110101 0
b1110101 7
b1110101 :
b1110101 =
b1110101 @
b1110101 B
b1110101 Q
b1 .
b1 6
b1 I
b1 W
b1110101 *
b1110101 N
b1110101 O
b1111101 1
b1111101 A
b1111101 G
b1 3
b1 <
b1 E
b1001 2
b1001 ?
b1001 F
b1110101 '
b1110101 M
b1110101 [
b1110101 ^
b10010010 (
b10010010 8
b10010010 ;
b10010010 >
b10010010 C
b10010010 Y
#66
b10000 .
b10000 6
b10000 I
b10000 W
b1110101 2
b1110101 ?
b1110101 F
b10001011 -
b10001011 L
b10001011 _
b11110111 1
b11110111 A
b11110111 G
b10000 3
b10000 <
b10000 E
#68
1"
#69
b100100 !
b100100 )
b100100 S
b100100 U
#70
b101000 T
b101000 R
b101000 V
#71
b10 \
b10 P
b101 Z
b110 X
b101 J
b101000001100000010100000010 #
b101000001100000010100000010 %
#72
b11110111 .
b11110111 6
b11110111 I
b11110111 W
b11 /
b11 5
b11 H
b11 K
0"
#73
b1001 0
b1001 7
b1001 :
b1001 =
b1001 @
b1001 B
b1001 Q
b1001 *
b1001 N
b1001 O
b1001 '
b1001 M
b1001 [
b1001 ^
b10000 (
b10000 8
b10000 ;
b10000 >
b10000 C
b10000 Y
#74
b11001 .
b11001 6
b11001 I
b11001 W
b0 3
b0 <
b0 E
b1001 2
b1001 ?
b1001 F
b11110111 -
b11110111 L
b11110111 _
b11001 1
b11001 A
b11001 G
#75
b11001 4
b11001 9
b11001 D
#76
1"
#77
b101000 !
b101000 )
b101000 S
b101000 U
#78
b101100 T
b101100 R
b101100 V
#79
bx \
bx P
bx Z
bx X
bx J
bx #
bx %
#80
0"
#81
bx 0
bx 7
bx :
bx =
bx @
bx B
bx Q
bx *
bx N
bx O
bx '
bx M
bx [
bx ^
bx (
bx 8
bx ;
bx >
bx C
bx Y
#82
bx .
bx 6
bx I
bx W
bx 2
bx ?
bx F
bx -
bx L
bx _
bx 1
bx A
bx G
bx 3
bx <
bx E
#83
bx 4
bx 9
bx D
#84
1"
#85
b101100 !
b101100 )
b101100 S
b101100 U
#86
b110000 T
b110000 R
b110000 V
#88
0"
#92
1"
#93
b110000 !
b110000 )
b110000 S
b110000 U
#94
b110100 T
b110100 R
b110100 V
#96
0"
#100
1"
