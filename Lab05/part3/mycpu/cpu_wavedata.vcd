$date
	Sun May 21 17:44:24 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 & WRITEENABLE $end
$var wire 8 ' REGOUT2 [7:0] $end
$var wire 8 ( REGOUT1 [7:0] $end
$var wire 32 ) PC [31:0] $end
$var wire 8 * MUX1 [7:0] $end
$var wire 1 + IMMEDIATESELECT $end
$var wire 1 , COMPSELECT $end
$var wire 8 - COMPOUT [7:0] $end
$var wire 8 . ALURESULT [7:0] $end
$var wire 3 / ALUOP [2:0] $end
$var wire 8 0 ALUIN [7:0] $end
$scope module Alu $end
$var wire 8 1 or_result [7:0] $end
$var wire 8 2 forward_result [7:0] $end
$var wire 8 3 and_result [7:0] $end
$var wire 8 4 add_result [7:0] $end
$var wire 3 5 SELECT [0:2] $end
$var wire 8 6 RESULT [7:0] $end
$var wire 8 7 DATA2 [7:0] $end
$var wire 8 8 DATA1 [7:0] $end
$upscope $end
$scope module Control_Unit $end
$var wire 8 9 OPCODE [7:0] $end
$var reg 3 : ALUOP [2:0] $end
$var reg 1 , COMP_SELECT $end
$var reg 1 + IMMEDIATE_SELECT $end
$var reg 1 & WRITEENABLE $end
$upscope $end
$scope module Mux1 $end
$var wire 1 , SELECT $end
$var wire 8 ; DATA2 [7:0] $end
$var wire 8 < DATA1 [7:0] $end
$var reg 8 = OUTPUT [7:0] $end
$upscope $end
$scope module Mux2 $end
$var wire 8 > DATA1 [7:0] $end
$var wire 8 ? DATA2 [7:0] $end
$var wire 1 + SELECT $end
$var reg 8 @ OUTPUT [7:0] $end
$upscope $end
$scope module Pc $end
$var wire 1 " CLK $end
$var wire 1 $ RESET $end
$var wire 32 A adder_out [31:0] $end
$var reg 32 B PC [31:0] $end
$var reg 32 C PC_NEXT [31:0] $end
$upscope $end
$scope module Reg_File $end
$var wire 1 " CLK $end
$var wire 8 D IN [7:0] $end
$var wire 3 E INADDRESS [2:0] $end
$var wire 8 F OUT1 [7:0] $end
$var wire 3 G OUT1ADDRESS [2:0] $end
$var wire 8 H OUT2 [7:0] $end
$var wire 3 I OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 & WRITE $end
$upscope $end
$scope module Two_Com $end
$var wire 8 J DATA [7:0] $end
$var wire 8 K OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 L \registers[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 M \registers[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 N \registers[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 O \registers[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 P \registers[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 Q \registers[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 R \registers[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module Reg_File $end
$var reg 8 S \registers[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
x+
bx *
bx )
bx (
bx '
x&
bx %
1$
bx #
0"
bx !
$end
#4
1"
#5
b100 !
b100 )
b100 B
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0$
#6
b1000 C
b1000 A
#7
b101 I
b101 ?
b0 G
b0 E
b0 9
b101 #
b101 %
#8
b101 0
b101 7
b101 @
b0 /
b0 5
b0 :
1+
0,
1&
0"
#9
b101 .
b101 6
b101 D
b0 *
b0 =
b0 >
bx1x1 1
b0x0x 3
b101 2
b0 '
b0 <
b0 H
b0 J
b0 (
b0 8
b0 F
#10
b0 -
b0 ;
b0 K
b101 1
b0 3
#11
b101 4
#12
1"
#13
b101 L
b1000 !
b1000 )
b1000 B
#14
b1100 C
b1100 A
#15
b1001 0
b1001 7
b1001 @
b1 I
b1001 ?
b1 E
b10000000000001001 #
b10000000000001001 %
b101 (
b101 8
b101 F
#16
b1001 .
b1001 6
b1001 D
b1101 1
b1001 2
b1 3
0"
#17
b1110 4
#20
1"
#21
b1100 !
b1100 )
b1100 B
b1001 M
#22
b10000 C
b10000 A
#23
b1 0
b1 7
b1 @
b1 ?
b10 E
b1 9
b1001 *
b1001 =
b1001 >
b1000000100000000000000001 #
b1000000100000000000000001 %
b1001 '
b1001 <
b1001 H
b1001 J
#24
b1001 0
b1001 7
b1001 @
b1 .
b1 6
b1 D
b101 1
0+
b1 2
b11110111 -
b11110111 ;
b11110111 K
0"
#25
b1001 .
b1001 6
b1001 D
b1101 1
b1001 2
#28
1"
#29
b1001 N
b10000 !
b10000 )
b10000 B
#30
b10100 C
b10100 A
#31
b0 I
b0 ?
b10 G
b11 E
b10 9
b10000000110000001000000000 #
b10000000110000001000000000 %
#32
b1110 .
b1110 6
b1110 D
b1 /
b1 5
b1 :
0"
#33
b101 0
b101 7
b101 @
b101 *
b101 =
b101 >
b101 '
b101 <
b101 H
b101 J
b1001 (
b1001 8
b1001 F
#34
b101 2
b11111011 -
b11111011 ;
b11111011 K
#36
1"
#37
b10100 !
b10100 )
b10100 B
b1110 O
#38
b11000 C
b11000 A
#39
b1 I
b1 ?
b11 G
b100 E
b11 9
b11000001000000001100000001 #
b11000001000000001100000001 %
#40
b11111011 0
b11111011 7
b11111011 @
b11111011 *
b11111011 =
b11111011 >
1,
0"
#41
b11111011 1
b1001 3
b11111011 2
b1001 '
b1001 <
b1001 H
b1001 J
b1110 (
b1110 8
b1110 F
#42
b11110111 0
b11110111 7
b11110111 @
b11110111 *
b11110111 =
b11110111 >
b11110111 -
b11110111 ;
b11110111 K
b11111111 1
b1010 3
#43
b110 3
b11110111 2
#44
b101 .
b101 6
b101 D
b101 4
1"
#45
b101 P
b11000 !
b11000 )
b11000 B
#46
b11100 C
b11100 A
#47
b101 I
b1110101 ?
b0 G
b0 E
b0 9
b1110101 #
b1110101 %
#48
b11110111 .
b11110111 6
b11110111 D
b1110101 0
b1110101 7
b1110101 @
b1001 *
b1001 =
b1001 >
b0 /
b0 5
b0 :
1+
0,
0"
#49
b1110101 .
b1110101 6
b1110101 D
b0 *
b0 =
b0 >
b1111111 1
b100 3
b1110101 2
b0 '
b0 <
b0 H
b0 J
b101 (
b101 8
b101 F
#50
b0 -
b0 ;
b0 K
b1110101 1
b101 3
#51
b1111010 4
#52
1"
#53
b11100 !
b11100 )
b11100 B
b1110101 L
#54
b100000 C
b100000 A
#55
b10010010 0
b10010010 7
b10010010 @
b10 I
b10010010 ?
b1 E
b10000000010010010 #
b10000000010010010 %
b1110101 (
b1110101 8
b1110101 F
#56
b10010010 .
b10010010 6
b10010010 D
b11110111 1
b10010010 2
b10000 3
0"
#57
b1001 *
b1001 =
b1001 >
b1001 '
b1001 <
b1001 H
b1001 J
b111 4
#58
b11110111 -
b11110111 ;
b11110111 K
#60
1"
#61
b10010010 M
b100000 !
b100000 )
b100000 B
#62
b100100 C
b100100 A
#63
b0 0
b0 7
b0 @
b0 I
b0 ?
b1 G
b101 E
b100 9
b100000001010000000100000000 #
b100000001010000000100000000 %
#64
b0 .
b0 6
b0 D
b1001 0
b1001 7
b1001 @
b1110101 1
b0 3
b0 2
b10 /
b10 5
b10 :
0+
0"
#65
b1110101 0
b1110101 7
b1110101 @
b1 .
b1 6
b1 D
b1110101 *
b1110101 =
b1110101 >
b1111101 1
b1 3
b1001 2
b1110101 '
b1110101 <
b1110101 H
b1110101 J
b10010010 (
b10010010 8
b10010010 F
#66
b10000 .
b10000 6
b10000 D
b1110101 2
b10001011 -
b10001011 ;
b10001011 K
b11110111 1
b10000 3
#68
1"
#69
b100100 !
b100100 )
b100100 B
b10000 Q
#70
b101000 C
b101000 A
#71
b10 I
b10 ?
b101 G
b110 E
b101 9
b101000001100000010100000010 #
b101000001100000010100000010 %
#72
b11110111 .
b11110111 6
b11110111 D
b11 /
b11 5
b11 :
0"
#73
b1001 0
b1001 7
b1001 @
b1001 *
b1001 =
b1001 >
b1001 '
b1001 <
b1001 H
b1001 J
b10000 (
b10000 8
b10000 F
#74
b11001 .
b11001 6
b11001 D
b0 3
b1001 2
b11110111 -
b11110111 ;
b11110111 K
b11001 1
#75
b11001 4
#76
1"
#77
b11001 R
b101000 !
b101000 )
b101000 B
#78
b101100 C
b101100 A
#79
bx I
bx ?
bx G
bx E
bx 9
bx #
bx %
#80
0"
#81
bx 0
bx 7
bx @
bx *
bx =
bx >
bx '
bx <
bx H
bx J
bx (
bx 8
bx F
#82
bx .
bx 6
bx D
bx 2
bx -
bx ;
bx K
bx 1
bx 3
#83
bx 4
#84
1"
#85
b101100 !
b101100 )
b101100 B
#86
b110000 C
b110000 A
#88
0"
#92
1"
#93
b110000 !
b110000 )
b110000 B
#94
b110100 C
b110100 A
#96
0"
#100
1"
#101
b110100 !
b110100 )
b110100 B
#102
b111000 C
b111000 A
#104
0"
#105
